import telebot
import constants
import user_com
import datetime
import random
import time
bot = telebot.TeleBot(constants.token)

kurs = '''–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É—Ä—Å–∞ –º–æ–Ω–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:
BTC/USD - %s
ETH/USD - %s
XRP/USD - %s
BCH/USD - %s
EOS/USD - %s
LTC/USD - %s

–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –∫—É—Ä—Å –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ.'''

QIWI_text = '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å QIWI.
–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –∏, –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç—Å—è –≤ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É
–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π id –∏ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
–í–∞—à id - %s
–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ #%s'''

Yandex_text = '''–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ø–î.
–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –∏, –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å –¥–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥—É—Ç—Å—è –≤ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É
–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π id –∏ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞
–í–∞—à id - %s
–í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ #%s'''

btc_text = '''–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è BTC —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∏–∂–µ.
(—Å—É–º–º–∞ –Ω–µ –º–µ–Ω–µ–µ 0,001 BTC).

–ü–æ—Å–ª–µ —á–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª—ë–∫ –ø–æ—Å–ª–µ 1-–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏'''

hello_text = '''–ü—Ä–∏–≤–µ—Ç! –í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–∫–ª—é—á–∏—Ç—å —Ç–µ–±–µ –ø–∞—Ä–∏ –∏ —É–≥–∞–¥–∞—Ç—å, –∫—É–¥–∞ –ø–æ–π–¥—ë—Ç –∫—É—Ä—Å –ë–∏—Ç–∫–æ–∏–Ω–∞ ¬´–≤–Ω–∏–∑¬ª –∏–ª–∏ ¬´–≤–≤–µ—Ä—Ö¬ª.

–ï—Å–ª–∏ —Ç—ã –±—É–¥–µ—à—å –ø—Ä–∞–≤ –º—ã –Ω–∞—á–∏—Å–ª–∏–º —Ç–µ–±–µ 80% –æ—Ç —Ç–≤–æ–µ–π —Å—Ç–∞–≤–∫–∏.

–ö –ø—Ä–∏–º–µ—Ä—É —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª 1 BTC –∏ –≤–µ—Ä–Ω–æ —É–≥–∞–¥–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –≤—ã–ø–ª–∞—Ç–∏–º —Ç–µ–±–µ 1,8 BTC, –ø—Ä–∏ —ç—Ç–æ–º –∫—É—Ä—Å –º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—Å—è –¥–∞–∂–µ –Ω–∞ 1$ –≤ –Ω—É–∂–Ω–æ–º —Ç–µ–±–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.

–ü–µ—Ä–∏–æ–¥ —Å—Ç–∞–≤–∫–∏ –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Å–∞–º–æ–º—É, –≤—Å–µ–≥–æ 6 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

–£–¥–∞—á–Ω—ã—Ö —Ç–µ–±–µ –ø–∞—Ä–∏
!'''

ref_text = '''–ö—Å—Ç–∞—Ç–∏, —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∑–∞ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–π–¥—ë—Ç –ø–æ —Ç–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, –º—ã –≤—ã–ø–ª–∞—Ç–∏–º —Ç–µ–±–µ 0,0005 BTC(~3$)

–°–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ¬ª
'''

pary_text = '''–ü–∞—Ä–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∫—É—Ä—Å–∞. –ë–∞–ª–∞–Ω—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.
'''

@bot.message_handler(commands= ['start'])
def start(message):
    if message.from_user.id == constants.admin and str(message.text)[:6] == '/start':
        try:
            link_name = str(message.text)[7:]
        except:
            link_name = ''
        hello = user_com.registration(message.from_user.id, message.from_user.first_name, str(message.from_user.id), link_name)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ó–∞–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏', '–ü—Ä–∏–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É')
        user_markup.row('–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∞–¥–º–∏–Ω',
                                reply_markup=user_markup)
        bot.register_next_step_handler(sent, admin_in)
    elif  message.from_user.id == constants.admin2 and str(message.text)[:6] == '/start':
        try:
            link_name = str(message.text)[7:]
        except:
            link_name = ''
        hello = user_com.registration(message.from_user.id, message.from_user.first_name, str(message.from_user.id), link_name)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ó–∞–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏', '–ü—Ä–∏–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∞–¥–º–∏–Ω',
                                reply_markup=user_markup)
        bot.register_next_step_handler(sent, admin_in)
    elif str(message.text)[:6] == '/start':
        try:
            link_name = str(message.text)[7:]
        except:
            link_name = ''
        hello = user_com.registration(message.from_user.id, message.from_user.first_name, str(message.from_user.id), link_name)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'ü§ù–ü–∞—Ä–∏')
        user_markup.row('üí∏–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üíº–ú–æ–π –±–∞–ª–∞–Ω—Å')
        user_markup.row('üî•–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, hello_text + ref_text + pary_text + hello, reply_markup= user_markup)
        bot.register_next_step_handler(sent, introduction)
    elif message.text == '–ù–∞–∑–∞–¥':
        pass

    s = user_com.o_clock()
    if s != []:
        for i in s:
            info = user_com.info(i)
            try:
                money = user_com.parse(i)
            except:
                break
            if info[8] == 'less':
                if float(money) < float(info[7]):
                    user_com.add_plus(info[0], info[6] * 1.8)
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞')
                else:
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
            else:
                if money > info[7]:
                    user_com.add_plus(info[0], info[6] * 1.8)
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞')
                else:
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
            user_com.null(info[0])

def introduction(message):
    if message.text == 'üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('Bitcoin- btc', 'Etherium - eth')
        user_markup.row('Yd - rub')
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, ' –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è‚¨áÔ∏è', reply_markup= user_markup)
        bot.send_message(constants.admin2, str(message.from_user.id) + ' —ç—Ç–æ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"')
        bot.send_message(constants.admin,
                         str(message.from_user.id) + ' —ç—Ç–æ id —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"')
        bot.register_next_step_handler(sent, payment)

    elif message.text == 'üíº–ú–æ–π –±–∞–ª–∞–Ω—Å':
        bot.send_message(message.from_user.id, '–í–∞—à –±–∞–ª–∞–Ω—Å ' + str(user_com.info(message.from_user.id)[2]) + ' –í–¢–°')
        message.text = 'start'
        start_one(message)

    elif message.text == 'üî•–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', '–†–µ—Ñ–µ—Ä–∞–ª—ã')
        user_markup.row('FAQ')
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, 'üî•–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', reply_markup=user_markup)
        bot.register_next_step_handler(sent, alse)

    elif message.text == 'ü§ù–ü–∞—Ä–∏':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('BTC/USD')
        user_markup.row('ETH/USD')
        user_markup.row('XRP/USD')
        user_markup.row('BCC/USD')
        user_markup.row('EOS/USD')
        user_markup.row('LTC/USD')
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–∞—Ä—É:', reply_markup= user_markup)
        bot.register_next_step_handler(sent, Bitcoin_def)

    elif message.text == 'üí∏–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('BTC/USD')
        user_markup.row('ETH/USD')
        user_markup.row('XRP/USD')
        user_markup.row('BCC/USD')
        user_markup.row('EOS/USD')
        user_markup.row('LTC/USD')
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–µ—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º –ø–∞—Ä—É:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, withraw)

    elif message.text == '–ù–∞–∑–∞–¥':
        pass

    else:
        bot.send_message(message.from_user.id, '"'+message.text+'", —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        message.text = 'start'
        start_one(message)

def withraw(message):
    if message.text == 'BTC/USD':
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ')
        bot.register_next_step_handler(sent, w_e)
    elif message.text == 'ETH/USD':
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ')
        bot.register_next_step_handler(sent, w_e)
    elif message.text == 'XRP/USD':
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ')
        bot.register_next_step_handler(sent, w_e)
    elif message.text == 'EOS/USD':
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ')
        bot.register_next_step_handler(sent, w_e)
    elif message.text == 'LTC/USD':
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: ')
        bot.register_next_step_handler(sent, w_e)
    elif message.text == '–ù–∞–∑–∞–¥':
        message.text = 'start'
        start_one(message)

    else:
        message.text = 'start'
        start_one(message)

def w_e(message):
    if message.text != '–ù–∞–∑–∞–¥':
        sent = bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞')
        bot.register_next_step_handler(sent, no_money)
    else:
        message.text = 'start'
        start_one(message)

def no_money(message):
    if message.text != '–ù–∞–∑–∞–¥':
        bot.send_message(message.from_user.id, '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
        message.text = 'start'
        start_one(message)
    else:
        message.text = 'start'
        start_one(message)


def Bitcoin_def(message):
    if message.text == 'BTC/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('BTC')
        constants.valume = 'BTC'
        user_markup.row('–í–≤–µ—Ä—Öüìà', '–í–Ω–∏–∑üìâ')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –∫—É—Ä—Å –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å BTC: ' + str(money) + '$' , reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay_l)
    elif message.text == 'ETH/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('ETH')
        constants.valume = 'ETH'
        user_markup.row('–í–≤–µ—Ä—Öüìà', '–í–Ω–∏–∑üìâ')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id,
                                '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –∫—É—Ä—Å –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å  ETH: ' + str(
                                    money) + '$', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay_l)
    elif message.text == 'XRP/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('XRP')
        constants.valume = 'XRP'
        user_markup.row('–í–≤–µ—Ä—Öüìà', '–í–Ω–∏–∑üìâ')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id,
                                '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –∫—É—Ä—Å –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å XRP: ' + str(
                                    money) + '$', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay_l)
    elif message.text == 'EOS/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('EOS')
        constants.valume = 'EOS'
        user_markup.row('–í–≤–µ—Ä—Öüìà', '–í–Ω–∏–∑üìâ')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id,
                                '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –∫—É—Ä—Å –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å EOS: ' + str(
                                    money) + '$', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay_l)
    elif message.text == 'LTC/USD':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        money = user_com.parse('LTC')
        constants.valume = 'LTC'
        user_markup.row('–í–≤–µ—Ä—Öüìà', '–í–Ω–∏–∑üìâ')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id,
                                '–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –∫—É—Ä—Å –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—É—Ä—Å Litecoin (LTC): ' + str(
                                    money) + '$', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay_l)
    elif message.text == '–ù–∞–∑–∞–¥':
        message.text = 'start'
        start_one(message)

    else:
        message.text = 'start'
        start_one(message)


def payment(message):
    if message.text == 'Bitcoin- btc':
        bot.send_message(message.from_user.id, btc_text + '\n' + str(random.choice(constants.btc_list)) )
        message.text = 'start'
        start_one(message)

    elif message.text == 'Etherium - eth':
        bot.send_message(message.from_user.id, btc_text + '\n' + str(random.choice(constants.eth_list)))
        message.text = 'start'
        start_one(message)

    elif message.text == '–ù–∞–∑–∞–¥':
        message.text = 'start'
        start_one(message)

    else:
        message.text = 'start'
        start_one(message)


def end_pay(message):
    if message.text == '–ù–∞–∑–∞–¥':
        message.text = 'start'
        start_one(message)

    else:
        message.text = 'start'
        start_one(message)



def time_case(message):
    if message.text == '1 –ß–∞—Å':
        user_com.set_alarm(1, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '2 –ß–∞—Å–∞':
        user_com.set_alarm(2, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '4 –ß–∞—Å–∞':
        user_com.set_alarm(4, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '6 –ß–∞—Å–æ–≤':
        user_com.set_alarm(6, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    elif message.text == '12 –ß–∞—Å–æ–≤':
        user_com.set_alarm(12, message.from_user.id)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, pay)
    else:
        message.text = 'start'
        start_one(message)


def pay(message):
    if message.text == '–ù–∞–∑–∞–¥':
        message.text = 'start'
        start_one(message)

    else:
        try:
            q = float(message.text)
            if  q <= user_com.info(message.from_user.id)[2]:
                user_com.add_plus(message.from_user.id, -q)
                user_com.pay(message.from_user.id, q)
                bot.send_message(message.from_user.id, '–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')

            else:
                bot.send_message(message.from_user.id, '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥')
            message.text = 'start'
            start_one(message)

        except:
            bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..')
            message.text = 'start'
            start_one(message)


def pay_l(message):
    if message.text == '–í–≤–µ—Ä—Öüìà':
        money = float(user_com.parse(constants.valume))
        user_com.more_less(message.from_user.id, 'more', money, constants.valume)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('1 –ß–∞—Å', '2 –ß–∞—Å–∞')
        user_markup.row('4 –ß–∞—Å–∞', '6 –ß–∞—Å–æ–≤')
        user_markup.row('12 –ß–∞—Å–æ–≤')
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, time_case)
    elif message.text == '–í–Ω–∏–∑üìâ':
        money = float(user_com.parse(constants.valume))
        user_com.more_less(message.from_user.id, 'more', money, constants.valume)
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('1 –ß–∞—Å', '2 –ß–∞—Å–∞')
        user_markup.row('4 –ß–∞—Å–∞', '6 –ß–∞—Å–æ–≤')
        user_markup.row('12 –ß–∞—Å–æ–≤')
        user_markup.row('–ù–∞–∑–∞–¥')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –≤–∞–º –≤—Ä–µ–º—è:', reply_markup=user_markup)
        bot.register_next_step_handler(sent, time_case)
    else:
        message.text = 'start'
        start_one(message)


def alse(message):
    if message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        sent  = bot.send_message(message.from_user.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')
        bot.register_next_step_handler(sent, question)
    elif message.text == '–†–µ—Ñ–µ—Ä–∞–ª—ã':
        info = user_com.info(message.from_user.id)
        bot.send_message(message.from_user.id, '–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, –≤–∞–º –Ω–∞—á–∏—Å–ª–∏—Ç—Å—è 0,0005 BTC \n –≠—Ç–æ –≤–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: http://t.me/testbitcoinkifirbot?start=' + str(info[3]) + ' . \n –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ' + str(info[5]))
        message.text = 'start'
        start_one(message)

    elif message.text == '–ù–∞–∑–∞–¥':
        message.text = 'start'
        start_one(message)

    else:
        bot.send_message(message.from_user.id, '"' + message.text + '", —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        message.text = 'start'
        start_one(message)


def question(mesaage):
    bot.send_message(constants.admin, mesaage.text + ' id:' + str(mesaage.from_user.id) + ' –ò–º—è:' + str(mesaage.from_user.first_name))
    bot.send_message(mesaage.from_user.id, '–°–ø–∞—Å–∏–±–æ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ –í–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É')
    mesaage.text = 'start'
    start_one(mesaage)


def admin_in(message):
    if message.text == '–ó–∞–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏':
        sent = bot.send_message(message.from_user.id, '–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∏–Ω—É—Ç—å? –∏ –∫–∞–∫–æ–π id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')
        bot.register_next_step_handler(sent, admin_add)

    elif message.text == '–ü—Ä–∏–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É':
        sent = bot.send_message(message.from_user.id, '–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç –∏–≥—Ä–æ–∫–∞? –∏ –∫–∞–∫–æ–π id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')
        bot.register_next_step_handler(sent, admin_add_plus)

    elif message.text == '–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
        id_ = user_com.all_id()
        for j in id_:
            try:
                write = user_com.parse('All')
                user_markup = telebot.types.ReplyKeyboardMarkup(True)
                user_markup.row('BTC/USD', 'ETH/USD')
                user_markup.row('XRP/USD', 'BCC/USD')
                user_markup.row('EOS/USD', 'LTC/USD')
                user_markup.row('–ù–∞–∑–∞–¥')
                user_markup.one_time_keyboard = True
                sent = bot.send_message(j[0], kurs % (write[0], write[1], write[2], write[3], write[4], write[6]),reply_markup=user_markup)

                bot.register_next_step_handler(sent, Bitcoin_def)
            except:
                pass

    else:
        bot.send_message(message.from_user.id, '"' + message.text + '", —è –Ω–µ –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É')
        message.text = 'start'
        start_one(message)


def admin_add(message):
    try:
        text = message.text.split()
        user_com.add(text[1], text[0])
        bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –¥–µ–Ω—å–≥–∏ –≤ –∏–≥—Ä–µ')
        message.text = 'start'
        start_one(message)

    except:
        bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        message.text = 'start'
        start_one(message)


def admin_add_plus(message):
    try:
        text = message.text.split()
        user_com.add_plus(int(text[1]), int(text[0]))
        bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ, –¥–µ–Ω—å–≥–∏ –≤ –∏–≥—Ä–µ')
        message.text = 'start'
        start_one(message)

    except:
        bot.send_message(message.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        message.text = 'start'
        start_one(message)


def start_one(message):
    s = user_com.o_clock()
    if s != []:
        for i in s:
            info = user_com.info(i)
            try:
                money = user_com.parse(i)
            except:
                break
            if info[8] == 'less':
                if float(money) < float(info[7]):
                    user_com.add_plus(info[0], info[6] * 1.8)
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞')
                else:
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
            else:
                if money > info[7]:
                    user_com.add_plus(info[0], info[6] * 1.8)
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞')
                else:
                    bot.send_message(info[0], '–°—Ç–∞–≤–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞')
            user_com.null(info[0])

    if message.from_user.id == constants.admin and str(message.text)[:6] == 'start':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ó–∞–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏', '–ü—Ä–∏–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É')
        user_markup.row('–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∞–¥–º–∏–Ω',
                                reply_markup=user_markup)
        bot.register_next_step_handler(sent, admin_in)
    elif message.from_user.id == constants.admin2 and str(message.text)[:6] == 'start':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('–ó–∞–∫–∏–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏', '–ü—Ä–∏–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏–≥—Ä–æ–∫—É')
        user_markup.one_time_keyboard = True
        sent = bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –∞–¥–º–∏–Ω',reply_markup=user_markup)
        bot.register_next_step_handler(sent, admin_in)
    elif message.text == 'start':
        user_markup = telebot.types.ReplyKeyboardMarkup(True)
        user_markup.row('üí∞–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'ü§ù–ü–∞—Ä–∏')
        user_markup.row('üí∏–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üíº–ú–æ–π –±–∞–ª–∞–Ω—Å')
        user_markup.row('üî•–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ')
        sent = bot.send_message(message.from_user.id, '–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?' ,reply_markup=user_markup)
        user_markup.one_time_keyboard = True
        bot.register_next_step_handler(sent, introduction)
    elif message.text == '–ù–∞–∑–∞–¥':
        pass


def time_now():
    for i in constants.time:
        if  str(datetime.datetime.today().time())[:5] == i and constants.boole == True:
            id_ = user_com.all_id()
            for j in id_:
                try:
                    write = user_com.parse('All')
                    user_markup = telebot.types.ReplyKeyboardMarkup(True)
                    user_markup.row('BTC/USD','ETH/USD')
                    user_markup.row('XRP/USD', 'BCC/USD')
                    user_markup.row('EOS/USD', 'LTC/USD')
                    user_markup.row('–ù–∞–∑–∞–¥')
                    sent = bot.send_message(j[0], kurs %(write[0], write[1], write[2], write[3], write[4], write[6]), reply_markup=user_markup)
                    user_markup.one_time_keyboard = True
                    bot.register_next_step_handler(sent, Bitcoin_def)
                    constants.boole = False
                    return True
                except:
                    return False
        else:
            constants.boole = True

bot.polling(none_stop=True , timeout=30 )
